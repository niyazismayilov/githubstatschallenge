// Generated by Dagger (https://dagger.dev).
package com.niyazismayilov.githubrepostats.di.component;

import com.niyazismayilov.githubrepostats.di.module.FragmentBuilderModule;
import com.niyazismayilov.githubrepostats.di.module.FragmentBuilderModule_ProvideAboutViewModelFactory;
import com.niyazismayilov.githubrepostats.di.module.FragmentBuilderModule_ProvideFavoriteViewModelFactory;
import com.niyazismayilov.githubrepostats.ui.base.BaseFragment_MembersInjector;
import com.niyazismayilov.githubrepostats.ui.fragment.favlist.FavoriteListFragment;
import com.niyazismayilov.githubrepostats.ui.fragment.favlist.FavoriteListViewModel;
import com.niyazismayilov.githubrepostats.ui.fragment.repolist.RepoListFragment;
import com.niyazismayilov.githubrepostats.ui.fragment.repolist.RepoListViewModel;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerFragmentComponent implements FragmentComponent {
  private final AppComponent appComponent;

  private final FragmentBuilderModule fragmentBuilderModule;

  private DaggerFragmentComponent(FragmentBuilderModule fragmentBuilderModuleParam,
      AppComponent appComponentParam) {
    this.appComponent = appComponentParam;
    this.fragmentBuilderModule = fragmentBuilderModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private RepoListViewModel getRepoListViewModel() {
    return FragmentBuilderModule_ProvideAboutViewModelFactory.provideAboutViewModel(fragmentBuilderModule, Preconditions.checkNotNull(appComponent.getDataManager(), "Cannot return null from a non-@Nullable component method"));
  }

  private FavoriteListViewModel getFavoriteListViewModel() {
    return FragmentBuilderModule_ProvideFavoriteViewModelFactory.provideFavoriteViewModel(fragmentBuilderModule, Preconditions.checkNotNull(appComponent.getDataManager(), "Cannot return null from a non-@Nullable component method"));
  }

  @Override
  public void inject(RepoListFragment fragment) {
    injectRepoListFragment(fragment);
  }

  @Override
  public void inject(FavoriteListFragment fragment) {
    injectFavoriteListFragment(fragment);
  }

  private RepoListFragment injectRepoListFragment(RepoListFragment instance) {
    BaseFragment_MembersInjector.injectMViewModel(instance, getRepoListViewModel());
    return instance;
  }

  private FavoriteListFragment injectFavoriteListFragment(FavoriteListFragment instance) {
    BaseFragment_MembersInjector.injectMViewModel(instance, getFavoriteListViewModel());
    return instance;
  }

  public static final class Builder {
    private FragmentBuilderModule fragmentBuilderModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder fragmentBuilderModule(FragmentBuilderModule fragmentBuilderModule) {
      this.fragmentBuilderModule = Preconditions.checkNotNull(fragmentBuilderModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public FragmentComponent build() {
      Preconditions.checkBuilderRequirement(fragmentBuilderModule, FragmentBuilderModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerFragmentComponent(fragmentBuilderModule, appComponent);
    }
  }
}
