// Generated by Dagger (https://dagger.dev).
package com.niyazismayilov.githubrepostats.di.component;

import android.app.Application;
import com.google.gson.Gson;
import com.niyazismayilov.githubrepostats.ApplicationClass;
import com.niyazismayilov.githubrepostats.ApplicationClass_MembersInjector;
import com.niyazismayilov.githubrepostats.data.IDataManager;
import com.niyazismayilov.githubrepostats.data.api.IApi;
import com.niyazismayilov.githubrepostats.data.local.CachedDao;
import com.niyazismayilov.githubrepostats.data.local.CachedDatabase;
import com.niyazismayilov.githubrepostats.data.local.CachedRepository;
import com.niyazismayilov.githubrepostats.di.module.AppModule;
import com.niyazismayilov.githubrepostats.di.module.AppModule_ProvideApiFactory;
import com.niyazismayilov.githubrepostats.di.module.AppModule_ProvideDataManagerFactory;
import com.niyazismayilov.githubrepostats.di.module.AppModule_ProvideGsonFactory;
import com.niyazismayilov.githubrepostats.di.module.AppModule_ProvideOkHttpFactory;
import com.niyazismayilov.githubrepostats.di.module.AppModule_ProvideRetrofitFactory;
import com.niyazismayilov.githubrepostats.di.module.AppModule_ProvideRxCallAdapterFactory;
import com.niyazismayilov.githubrepostats.di.module.RoomModule;
import com.niyazismayilov.githubrepostats.di.module.RoomModule_ProvideCacheDaoFactory;
import com.niyazismayilov.githubrepostats.di.module.RoomModule_ProvideCacheDataBaseFactory;
import com.niyazismayilov.githubrepostats.di.module.RoomModule_ProvideCacheRepositoryFactory;
import dagger.android.AndroidInjector;
import dagger.android.DispatchingAndroidInjector;
import dagger.android.DispatchingAndroidInjector_Factory;
import dagger.internal.DoubleCheck;
import dagger.internal.InstanceFactory;
import dagger.internal.Preconditions;
import java.util.Collections;
import javax.inject.Provider;
import okhttp3.OkHttpClient;
import retrofit2.Retrofit;
import retrofit2.adapter.rxjava2.RxJava2CallAdapterFactory;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerAppComponent implements AppComponent {
  private final AppModule appModule;

  private Provider<Gson> provideGsonProvider;

  private Provider<RxJava2CallAdapterFactory> provideRxCallAdapterProvider;

  private Provider<OkHttpClient> provideOkHttpProvider;

  private Provider<Retrofit> provideRetrofitProvider;

  private Provider<Application> applicationProvider;

  private Provider<CachedDatabase> provideCacheDataBaseProvider;

  private Provider<CachedDao> provideCacheDaoProvider;

  private Provider<CachedRepository> provideCacheRepositoryProvider;

  private DaggerAppComponent(AppModule appModuleParam, RoomModule roomModuleParam,
      Application applicationParam) {
    this.appModule = appModuleParam;
    initialize(appModuleParam, roomModuleParam, applicationParam);
  }

  public static AppComponent.Builder builder() {
    return new Builder();
  }

  private DispatchingAndroidInjector<Object> getDispatchingAndroidInjectorOfObject() {
    return DispatchingAndroidInjector_Factory.newInstance(Collections.<Class<?>, Provider<AndroidInjector.Factory<?>>>emptyMap(), Collections.<String, Provider<AndroidInjector.Factory<?>>>emptyMap());
  }

  private IApi getIApi() {
    return AppModule_ProvideApiFactory.provideApi(appModule, provideRetrofitProvider.get());
  }

  @SuppressWarnings("unchecked")
  private void initialize(final AppModule appModuleParam, final RoomModule roomModuleParam,
      final Application applicationParam) {
    this.provideGsonProvider = DoubleCheck.provider(AppModule_ProvideGsonFactory.create(appModuleParam));
    this.provideRxCallAdapterProvider = DoubleCheck.provider(AppModule_ProvideRxCallAdapterFactory.create(appModuleParam));
    this.provideOkHttpProvider = DoubleCheck.provider(AppModule_ProvideOkHttpFactory.create(appModuleParam));
    this.provideRetrofitProvider = DoubleCheck.provider(AppModule_ProvideRetrofitFactory.create(appModuleParam, provideGsonProvider, provideRxCallAdapterProvider, provideOkHttpProvider));
    this.applicationProvider = InstanceFactory.create(applicationParam);
    this.provideCacheDataBaseProvider = DoubleCheck.provider(RoomModule_ProvideCacheDataBaseFactory.create(roomModuleParam, applicationProvider));
    this.provideCacheDaoProvider = DoubleCheck.provider(RoomModule_ProvideCacheDaoFactory.create(roomModuleParam, provideCacheDataBaseProvider));
    this.provideCacheRepositoryProvider = DoubleCheck.provider(RoomModule_ProvideCacheRepositoryFactory.create(roomModuleParam, provideCacheDaoProvider));
  }

  @Override
  public void inject(ApplicationClass app) {
    injectApplicationClass(app);
  }

  @Override
  public IDataManager getDataManager() {
    return AppModule_ProvideDataManagerFactory.provideDataManager(appModule, getIApi(), provideCacheRepositoryProvider.get());
  }

  private ApplicationClass injectApplicationClass(ApplicationClass instance) {
    ApplicationClass_MembersInjector.injectAndroidInjector(instance, getDispatchingAndroidInjectorOfObject());
    return instance;
  }

  private static final class Builder implements AppComponent.Builder {
    private Application application;

    @Override
    public Builder application(Application application) {
      this.application = Preconditions.checkNotNull(application);
      return this;
    }

    @Override
    public AppComponent build() {
      Preconditions.checkBuilderRequirement(application, Application.class);
      return new DaggerAppComponent(new AppModule(), new RoomModule(), application);
    }
  }
}
