// Generated by Dagger (https://dagger.dev).
package com.niyazismayilov.githubrepostats.data;

import com.niyazismayilov.githubrepostats.data.api.IApi;
import com.niyazismayilov.githubrepostats.data.local.CachedRepository;
import dagger.internal.Factory;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppDataManager_Factory implements Factory<AppDataManager> {
  private final Provider<IApi> iApiProvider;

  private final Provider<CachedRepository> iCachedRepositoryProvider;

  public AppDataManager_Factory(Provider<IApi> iApiProvider,
      Provider<CachedRepository> iCachedRepositoryProvider) {
    this.iApiProvider = iApiProvider;
    this.iCachedRepositoryProvider = iCachedRepositoryProvider;
  }

  @Override
  public AppDataManager get() {
    return newInstance(iApiProvider.get(), iCachedRepositoryProvider.get());
  }

  public static AppDataManager_Factory create(Provider<IApi> iApiProvider,
      Provider<CachedRepository> iCachedRepositoryProvider) {
    return new AppDataManager_Factory(iApiProvider, iCachedRepositoryProvider);
  }

  public static AppDataManager newInstance(IApi iApi, CachedRepository iCachedRepository) {
    return new AppDataManager(iApi, iCachedRepository);
  }
}
