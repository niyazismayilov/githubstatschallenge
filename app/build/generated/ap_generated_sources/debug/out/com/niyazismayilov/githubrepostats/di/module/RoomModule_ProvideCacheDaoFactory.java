// Generated by Dagger (https://dagger.dev).
package com.niyazismayilov.githubrepostats.di.module;

import com.niyazismayilov.githubrepostats.data.local.CachedDao;
import com.niyazismayilov.githubrepostats.data.local.CachedDatabase;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RoomModule_ProvideCacheDaoFactory implements Factory<CachedDao> {
  private final RoomModule module;

  private final Provider<CachedDatabase> cacheDatabaseProvider;

  public RoomModule_ProvideCacheDaoFactory(RoomModule module,
      Provider<CachedDatabase> cacheDatabaseProvider) {
    this.module = module;
    this.cacheDatabaseProvider = cacheDatabaseProvider;
  }

  @Override
  public CachedDao get() {
    return provideCacheDao(module, cacheDatabaseProvider.get());
  }

  public static RoomModule_ProvideCacheDaoFactory create(RoomModule module,
      Provider<CachedDatabase> cacheDatabaseProvider) {
    return new RoomModule_ProvideCacheDaoFactory(module, cacheDatabaseProvider);
  }

  public static CachedDao provideCacheDao(RoomModule instance, CachedDatabase cacheDatabase) {
    return Preconditions.checkNotNull(instance.provideCacheDao(cacheDatabase), "Cannot return null from a non-@Nullable @Provides method");
  }
}
