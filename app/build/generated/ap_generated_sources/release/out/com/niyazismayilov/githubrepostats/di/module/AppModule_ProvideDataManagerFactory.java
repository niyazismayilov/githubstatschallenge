// Generated by Dagger (https://dagger.dev).
package com.niyazismayilov.githubrepostats.di.module;

import com.niyazismayilov.githubrepostats.data.IDataManager;
import com.niyazismayilov.githubrepostats.data.api.IApi;
import com.niyazismayilov.githubrepostats.data.local.CachedRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class AppModule_ProvideDataManagerFactory implements Factory<IDataManager> {
  private final AppModule module;

  private final Provider<IApi> iApiMethodProvider;

  private final Provider<CachedRepository> iCacheRepositoryProvider;

  public AppModule_ProvideDataManagerFactory(AppModule module, Provider<IApi> iApiMethodProvider,
      Provider<CachedRepository> iCacheRepositoryProvider) {
    this.module = module;
    this.iApiMethodProvider = iApiMethodProvider;
    this.iCacheRepositoryProvider = iCacheRepositoryProvider;
  }

  @Override
  public IDataManager get() {
    return provideDataManager(module, iApiMethodProvider.get(), iCacheRepositoryProvider.get());
  }

  public static AppModule_ProvideDataManagerFactory create(AppModule module,
      Provider<IApi> iApiMethodProvider, Provider<CachedRepository> iCacheRepositoryProvider) {
    return new AppModule_ProvideDataManagerFactory(module, iApiMethodProvider, iCacheRepositoryProvider);
  }

  public static IDataManager provideDataManager(AppModule instance, IApi iApiMethod,
      CachedRepository iCacheRepository) {
    return Preconditions.checkNotNull(instance.provideDataManager(iApiMethod, iCacheRepository), "Cannot return null from a non-@Nullable @Provides method");
  }
}
