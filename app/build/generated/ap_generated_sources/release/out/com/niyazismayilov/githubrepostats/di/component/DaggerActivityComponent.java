// Generated by Dagger (https://dagger.dev).
package com.niyazismayilov.githubrepostats.di.component;

import com.niyazismayilov.githubrepostats.di.module.ActivityModule;
import com.niyazismayilov.githubrepostats.di.module.ActivityModule_ProvideFeedViewModelFactory;
import com.niyazismayilov.githubrepostats.ui.activity.MainActivity;
import com.niyazismayilov.githubrepostats.ui.activity.MainActivityViewModel;
import com.niyazismayilov.githubrepostats.ui.base.BaseActivity_MembersInjector;
import dagger.internal.Preconditions;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class DaggerActivityComponent implements ActivityComponent {
  private final AppComponent appComponent;

  private final ActivityModule activityModule;

  private DaggerActivityComponent(ActivityModule activityModuleParam,
      AppComponent appComponentParam) {
    this.appComponent = appComponentParam;
    this.activityModule = activityModuleParam;
  }

  public static Builder builder() {
    return new Builder();
  }

  private MainActivityViewModel getMainActivityViewModel() {
    return ActivityModule_ProvideFeedViewModelFactory.provideFeedViewModel(activityModule, Preconditions.checkNotNull(appComponent.getDataManager(), "Cannot return null from a non-@Nullable component method"));
  }

  @Override
  public void inject(MainActivity mainActivity) {
    injectMainActivity(mainActivity);
  }

  private MainActivity injectMainActivity(MainActivity instance) {
    BaseActivity_MembersInjector.injectMViewModel(instance, getMainActivityViewModel());
    return instance;
  }

  public static final class Builder {
    private ActivityModule activityModule;

    private AppComponent appComponent;

    private Builder() {
    }

    public Builder activityModule(ActivityModule activityModule) {
      this.activityModule = Preconditions.checkNotNull(activityModule);
      return this;
    }

    public Builder appComponent(AppComponent appComponent) {
      this.appComponent = Preconditions.checkNotNull(appComponent);
      return this;
    }

    public ActivityComponent build() {
      Preconditions.checkBuilderRequirement(activityModule, ActivityModule.class);
      Preconditions.checkBuilderRequirement(appComponent, AppComponent.class);
      return new DaggerActivityComponent(activityModule, appComponent);
    }
  }
}
