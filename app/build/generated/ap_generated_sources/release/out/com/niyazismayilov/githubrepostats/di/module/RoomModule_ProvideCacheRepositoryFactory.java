// Generated by Dagger (https://dagger.dev).
package com.niyazismayilov.githubrepostats.di.module;

import com.niyazismayilov.githubrepostats.data.local.CachedDao;
import com.niyazismayilov.githubrepostats.data.local.CachedRepository;
import dagger.internal.Factory;
import dagger.internal.Preconditions;
import javax.inject.Provider;

@SuppressWarnings({
    "unchecked",
    "rawtypes"
})
public final class RoomModule_ProvideCacheRepositoryFactory implements Factory<CachedRepository> {
  private final RoomModule module;

  private final Provider<CachedDao> iCacheDaoProvider;

  public RoomModule_ProvideCacheRepositoryFactory(RoomModule module,
      Provider<CachedDao> iCacheDaoProvider) {
    this.module = module;
    this.iCacheDaoProvider = iCacheDaoProvider;
  }

  @Override
  public CachedRepository get() {
    return provideCacheRepository(module, iCacheDaoProvider.get());
  }

  public static RoomModule_ProvideCacheRepositoryFactory create(RoomModule module,
      Provider<CachedDao> iCacheDaoProvider) {
    return new RoomModule_ProvideCacheRepositoryFactory(module, iCacheDaoProvider);
  }

  public static CachedRepository provideCacheRepository(RoomModule instance, CachedDao iCacheDao) {
    return Preconditions.checkNotNull(instance.provideCacheRepository(iCacheDao), "Cannot return null from a non-@Nullable @Provides method");
  }
}
